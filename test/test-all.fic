(define '("reader" "expander" "util") (fn (reader expander util)

  (import "test")

  (set! show-input (fn (in) (+ (+ "\"" in) "\"")))

  (set! show-output (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show-output) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [else ((.toString out))])))

  (var read (fn (input check)
    (check (.read reader input))))
    
  (var expand (fn (input check)
    (let ([read-result (.read reader input)])
      (if (equal? (. read-result 0) 'failure)
          (check `(reader-failure ,read-result))
          (.expand expander (. read-result 1) (fn (expand-result)
            (check expand-result)))))))
    
  (import "test-reader" "test-expander")

  run-tests))