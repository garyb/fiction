(define '("reader" "expander" "util" "fs" "path") (fn
         ( reader   expander   util   fs   path)

  (import "test" "../src/fic/prelude" "../src/fic/compiler-macros")

  ; Creates a string representation for test input strings.
  (set! show-input (fn (in) (+ (+ "\"" in) "\"")))

  ; Creates a string representation for test output s-exprs.
  (set! show-output (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show-output) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [(eqv? out null) "null"]
          [(in? out "id") (+ "{" (+ (.id out) "}"))]
          [else ((.toString out))])))

  ; The global node.js environment, passed when expanding/compiling code so
  ; references to these identifiers are handled correctly.
  (var node-env (make-lookup
    "__filename" "__dirname" "Buffer" "console" "exports" "GLOBAL" "global"
    "module" "process" "require"))

  ; Handles loading of import `name`.
  (var load-import (fn (name)
    (.log console "Load import" name "...")
    (let* ([filename (.resolve path "test" (+ name ".fic"))]
           [loaded (.readFileSync fs filename "utf8")]
           [read-result (.read reader (+ name ".fic") loaded)])
      (if (equal? (. read-result 0) 'failure)
        (error "Import '" name "' reading failed: " (show-output read-result))
        (. read-result 1)))))

  ; Runs the reader on string `input` and tests the result using `check`.
  (var read (fn (input check)
    (check (.read reader "test case" input))))

  ; Runs the reader and expander or string `input` and tests the result using
  ; `check`.
  (var expand (fn (input check)
    (let ([read-result (.read reader "test case" input)])
      (if (equal? (. read-result 0) 'failure)
          (check `(reader-failure ,read-result))
          (check (.expand expander (. read-result 1) node-env load-import))))))

  ; Import the actual test cases
  (import "test-reader" "test-expander")

  ; Export the run function
  run-tests))