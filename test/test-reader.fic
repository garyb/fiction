; TODO: quickcheck style testing for things like unicode sequences, number literals, etc.

(var s (obj [is-state #t]))

(when "reading symbols" using read
  ("a"            should return `((symbol "a" ,s)))
  ("lower"        should return `((symbol "lower" ,s)))
  ("UPPER"        should return `((symbol "UPPER" ,s)))
  ("camelCase"    should return `((symbol "camelCase" ,s)))
  ("CamelCase"    should return `((symbol "CamelCase" ,s)))
  ("j0"           should return `((symbol "j0" ,s)))
  ("hyphen-ated"  should return `((symbol "hyphen-ated" ,s)))
  ("under_scored" should return `((symbol "under_scored" ,s)))
  (".length"      should return `((symbol ".length" ,s)))
  ("úņīčőđē"      should return `((symbol "úņīčőđē" ,s)))
  ("dot.ted"      should fail   "Invalid use of '.' in symbol (test case, line 1, char 1)"))

(when "reading booleans" using read
  ("#t"     should return `((literal #t ,s)))
  ("#f"     should return `((literal #f ,s)))
  ("#true"  should fail   "Invalid boolean value '#true', expected '#t' or '#f' (test case, line 1, char 1)")
  ("#tasdf" should fail   "Invalid boolean value '#tasdf', expected '#t' or '#f' (test case, line 1, char 1)")
  ("#false" should fail   "Invalid boolean value '#false', expected '#t' or '#f' (test case, line 1, char 1)")
  ("#fasdf" should fail   "Invalid boolean value '#fasdf', expected '#t' or '#f' (test case, line 1, char 1)"))

(when "reading numbers" using read
  ("1"    should return `((literal 1 ,s)))
  ("0.5"  should return `((literal 0.5 ,s)))
  ("0xFF" should return `((literal 0xFF ,s)))
  ("1a"   should fail   "Invalid number '1a' (test case, line 1, char 1)")
  ("0xFG" should fail   "Invalid number '0xFG' (test case, line 1, char 1)"))


(when "reading strings" using read
  ("\"word\""                should return `((literal "word" ,s)))
  ("\"escape \\\"this\\\"\"" should return `((literal "escape \\\"this\\\"" ,s)))
  ("\"good: \\u003B\""       should return `((literal "good: \\u003B" ,s)))
  ("\"bad: \\u3B\""          should fail   "Invalid unicode escape sequence '\\u3B' (test case, line 1, char 9)")
  ("\"bad: \\u000g\""        should fail   "Invalid unicode escape sequence '\\u000' (test case, line 1, char 9)")
  ("\"unterminated"          should fail   "Unterminated string, expected a closing '\"' (test case, line 1, char 1)"))

(when "reading regular expressions" using read
  ("#/[a-z]/"    should return `((literal #/[a-z]/ ,s)))
  ("#/[a-z]/gim" should return `((literal #/[a-z]/gim ,s)))
  ("#/\\b\\B\\cX\\d\\D\\f\\n\\r\\s\\S\\t\\v\\w\\W\\1\\2\\3\\4\\5\\6\\7\\8\\9/" should return `((literal #/\b\B\cX\d\D\f\n\r\s\S\t\v\w\W\1\2\3\4\5\6\7\8\9/ ,s)))
  ("#/[a-z]/s"   should fail   "Invalid regular expression options 's' (test case, line 1, char 1)"))

(when "reading lists" using read
  ("()"              should return `((list () ,s)))
  ("[]"              should return `((list () ,s)))
  ("{}"              should return `((list () ,s)))
  ("(a)"             should return `((list ((symbol "a" ,s)) ,s)))
  ("[a]"             should return `((list ((symbol "a" ,s)) ,s)))
  ("{a}"             should return `((list ((symbol "a" ,s)) ,s)))
  ("(a 1)"           should return `((list ((symbol "a" ,s) (literal 1 ,s)) ,s)))
  ("[a 1]"           should return `((list ((symbol "a" ,s) (literal 1 ,s)) ,s)))
  ("{a 1}"           should return `((list ((symbol "a" ,s) (literal 1 ,s)) ,s)))
  ("(a (b (c nil)))" should return `((list ((symbol "a" ,s) (list ((symbol "b" ,s) (list ((symbol "c" ,s) (symbol "nil" ,s)) ,s)) ,s)) ,s)))
  ("(a\nb\nc)"       should return `((list ((symbol "a" ,s) (symbol "b" ,s) (symbol "c" ,s)) ,s))))

(when "reading quote" using read
  ("'a"     should return `((list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)))
  ("'5"     should return `((list ((symbol "quote" ,s) (literal 5 ,s)) ,s)))
  ("'()"    should return `((list ((symbol "quote" ,s) (list () ,s)) ,s)))
  ("'(a)"   should return `((list ((symbol "quote" ,s) (list ((symbol "a" ,s)) ,s)) ,s)))
  ("'(a 5)" should return `((list ((symbol "quote" ,s) (list ((symbol "a" ,s) (literal 5 ,s)) ,s)) ,s)))
  ("''a"    should return `((list ((symbol "quote" ,s) (list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)))
  ("'('a)"  should return `((list ((symbol "quote" ,s) (list ((list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)) ,s)))
  ("'`a"    should return `((list ((symbol "quote" ,s) (list ((symbol "quasiquote" ,s) (symbol "a" ,s)) ,s)) ,s))))

(when "reading quasiquote" using read
  ("`a"     should return `((list ((symbol "quasiquote" ,s) (symbol "a" ,s)) ,s)))
  ("`5"     should return `((list ((symbol "quasiquote" ,s) (literal 5 ,s)) ,s)))
  ("`()"    should return `((list ((symbol "quasiquote" ,s) (list () ,s)) ,s)))
  ("`(a)"   should return `((list ((symbol "quasiquote" ,s) (list ((symbol "a" ,s)) ,s)) ,s)))
  ("`(a 5)" should return `((list ((symbol "quasiquote" ,s) (list ((symbol "a" ,s) (literal 5 ,s)) ,s)) ,s)))
  ("`'a"    should return `((list ((symbol "quasiquote" ,s) (list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)))
  ("`('a)"  should return `((list ((symbol "quasiquote" ,s) (list ((list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)) ,s)))
  ("``a"    should return `((list ((symbol "quasiquote" ,s) (list ((symbol "quasiquote" ,s) (symbol "a" ,s)) ,s)) ,s))))

(when "reading unquote" using read
  (",a"     should return `((list ((symbol "unquote" ,s) (symbol "a" ,s)) ,s)))
  (",5"     should return `((list ((symbol "unquote" ,s) (literal 5 ,s)) ,s)))
  (",()"    should return `((list ((symbol "unquote" ,s) (list () ,s)) ,s)))
  (",(a)"   should return `((list ((symbol "unquote" ,s) (list ((symbol "a" ,s)) ,s)) ,s)))
  (",(a 5)" should return `((list ((symbol "unquote" ,s) (list ((symbol "a" ,s) (literal 5 ,s)) ,s)) ,s)))
  (",'a"    should return `((list ((symbol "unquote" ,s) (list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)))
  (",('a)"  should return `((list ((symbol "unquote" ,s) (list ((list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)) ,s)))
  (",`a"    should return `((list ((symbol "unquote" ,s) (list ((symbol "quasiquote" ,s) (symbol "a" ,s)) ,s)) ,s))))

(when "reading unquote-splicing" using read
  (",@a"     should return `((list ((symbol "unquote-splicing" ,s) (symbol "a" ,s)) ,s)))
  (",@5"     should return `((list ((symbol "unquote-splicing" ,s) (literal 5 ,s)) ,s)))
  (",@()"    should return `((list ((symbol "unquote-splicing" ,s) (list () ,s)) ,s)))
  (",@(a)"   should return `((list ((symbol "unquote-splicing" ,s) (list ((symbol "a" ,s)) ,s)) ,s)))
  (",@(a 5)" should return `((list ((symbol "unquote-splicing" ,s) (list ((symbol "a" ,s) (literal 5 ,s)) ,s)) ,s)))
  (",@'a"    should return `((list ((symbol "unquote-splicing" ,s) (list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)))
  (",@('a)"  should return `((list ((symbol "unquote-splicing" ,s) (list ((list ((symbol "quote" ,s) (symbol "a" ,s)) ,s)) ,s)) ,s)))
  (",@`a"    should return `((list ((symbol "unquote-splicing" ,s) (list ((symbol "quasiquote" ,s) (symbol "a" ,s)) ,s)) ,s))))

(when "reading comments" using read
  ("; hi"         should return `((comment " hi" ,s)))
  ("(;a\nb\nc)"   should return `((list ((comment "a" ,s) (symbol "b" ,s) (symbol "c" ,s)) ,s)))
  ("(a\n;b\nc)"   should return `((list ((symbol "a" ,s) (comment "b" ,s) (symbol "c" ,s)) ,s)))
  ("(a\nb\n;c\n)" should return `((list ((symbol "a" ,s) (symbol "b" ,s) (comment "c" ,s)) ,s))))

(when "reading toplevel" using read
  ("a b c" should return `((symbol "a" ,s) (symbol "b" ,s) (symbol "c" ,s))))