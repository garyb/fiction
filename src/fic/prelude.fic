(var map (fn (f list) (.map list f)))
(var foreach (fn (f list) (.foreach list f) #t))
(var filter (fn (f list) (.filter list f)))
(var every (fn (f list) (.every list f)))
(var any (fn (f list) (.some list f)))
(var fold-left (fn (f init list) (.reduce list f init)))
(var fold-right (fn (f init list) (.reduceRight list f init)))
(var append (fn (xs ys) (.concat xs ys)))

(var contains (fn (x xs) (> (.indexOf xs x) (- 1))))

(var memq (fn (x xs)
  (cond
    [(empty? xs) #f]
    [(eq? (car xs) x) xs]
    [else (memq x (cdr xs))])))
    
(var memv (fn (x xs)
  (cond
    [(empty? xs) #f]
    [(eqv? (car xs) x) xs]
    [else (memv x (cdr xs))])))
    
(var member (fn (x xs)
  (cond
    [(empty? xs) #f]
    [(equal? (car xs) x) xs]
    [else (member x (cdr xs))])))
    
(var empty? (fn (xs) (eq? (.length xs) 0)))
      

; not really cons, you can't do (cons x y) at all, y has to be a list ys.
(var cons (fn (x ys) (.concat `(,x) ys)))

(var car (fn (xs) (. xs 0)))
(var cdr (fn (xs) (.slice xs 1)))

(var caar (fn (xs) (car (car xs))))
(var cadr (fn (xs) (car (cdr xs))))
(var cdar (fn (xs) (cdr (car xs))))
(var cddr (fn (xs) (cdr (cdr xs))))

(var caaar (fn (xs) (car (car (car xs)))))
(var caadr (fn (xs) (car (car (cdr xs)))))
(var cadar (fn (xs) (car (cdr (car xs)))))
(var caddr (fn (xs) (car (cdr (cdr xs)))))
(var cdaar (fn (xs) (cdr (car (car xs)))))
(var cdadr (fn (xs) (cdr (car (cdr xs)))))
(var cddar (fn (xs) (cdr (cdr (car xs)))))
(var cdddr (fn (xs) (cdr (cdr (car xs)))))

(var caaaar (fn (xs) (car (car (car (car xs))))))
(var caaadr (fn (xs) (car (car (car (cdr xs))))))
(var caadar (fn (xs) (car (car (cdr (car xs))))))
(var caaddr (fn (xs) (car (car (cdr (cdr xs))))))
(var cadaar (fn (xs) (car (cdr (car (car xs))))))
(var cadadr (fn (xs) (car (cdr (car (cdr xs))))))
(var caddar (fn (xs) (car (cdr (cdr (car xs))))))
(var cadddr (fn (xs) (car (cdr (cdr (cdr xs))))))
(var cdaaar (fn (xs) (cdr (car (car (car xs))))))
(var cdaadr (fn (xs) (cdr (car (car (cdr xs))))))
(var cdadar (fn (xs) (cdr (car (cdr (car xs))))))
(var cdaddr (fn (xs) (cdr (car (cdr (cdr xs))))))
(var cddaar (fn (xs) (cdr (cdr (car (car xs))))))
(var cddadr (fn (xs) (cdr (cdr (car (cdr xs))))))
(var cdddar (fn (xs) (cdr (cdr (cdr (car xs))))))
(var cddddr (fn (xs) (cdr (cdr (cdr (cdr xs))))))

(var in? (fn (obj prop)
  (.call (.hasOwnProperty (.prototype Object)) obj prop)))

(var fn? (fn (f)
  (eq? (typeof f) "function")))