; ### Library syntax

; **Macro syntax errors**

; > _syntax_: `(syntax-error)`
;
; Utility macro for raising errors within other macros. Causes an error when
; called with any arguments to exploit the expander's error message and print
; a message like `syntax-error: bad syntax @ (syntax-error "some error")`. Also
; causes an error when called without arguments, by calling itself with an
; argument.
(define-syntax syntax-error
  (syntax-rules ()
    [(syntax-error) (syntax-error "invalid usage, no message supplied")]))



; **Sequencing**

; > _syntax_: `(do <expr> <exprs ...>)`
;
; Evaluates `<expr> <exprs ...>` in sequence and returns the result of the last
; expression.
(define-syntax do
  (syntax-rules ()
    [(_) (syntax-error "do: empty expression")]
    [(_ expr) expr]
    [(_ expr exprs ...)
     ((fn () expr exprs ...))]))



; **Binding**

; > _syntax_: `(let (<binding ...>) <body>)
; > _binding syntax_: `(<id> <expr>)`
; > _body syntax_: `<expr> <exprs ...>`
;
; Assigns each `<expr>` to each `<id>` in `<binding ...>` and then evaluates
; `<body>`.     
(define-syntax let
  (syntax-rules ()
    [(_ (x ...)) (syntax-error "let: empty body")]
    [(_ ((id val) ...) body bodies ...)
     ((fn (id ...) body bodies ...)
      val ...)]
    [(_ tag (x ...)) (syntax-error "let: empty body")]
    [(_ tag ((id val) ...) body bodies ...)
     ((letrec ((tag (fn (id ...)
                      body bodies ...)))
        tag)
      val ...)]))

; > _syntax_: `(let* (<binding ...>) <body>)
; > _binding syntax_: `(<id> <expr>)`
; > _body syntax_: `<expr> <exprs ...>`
;
; Sequentially assigns each `<expr>` to each `<id>` in `<binding ...>`,
; therefore allowing each binding to refer to the identifier in the previous
; binding, and then evaluates `<body>`.
(define-syntax let*
  (syntax-rules ()
    [(_ (x ...)) (syntax-error "let*: empty body")]
    [(_ () body bodies ...) (let () body bodies ...)]
    [(_ ((id1 val1) (id2 val2) ...) body bodies ...)
     (let ((id1 val1))
       (let* ((id2 val2) ...)
         body bodies ...))]))

; > _syntax_: `(letrec (<binding ...>) <body>)
; > _binding syntax_: `(<id> <expr>)`
; > _body syntax_: `<expr> <exprs ...>`
;
; Assigns each `<expr>` to each `<id>` in `<binding ...>` in a way that allows
; `<expr>` to make recursive references to `<id>`, and then evaluates `<body>`.
(define-syntax letrec
  (syntax-rules ()
    [(_ (x ...)) (syntax-error "letrec: empty body")]
    [(_ ((id val) ...) body bodies ...)
     (let ()
       (var id val) ...
       (let () body bodies ...))]))



; **Conditionals**

; > _syntax_: `(cond <clause ...>)`
; > _clause syntax_: `(<test> <expr> <exprs ...>)`
;
;
(define-syntax cond
  (syntax-rules (else)
    [(_ x)
     (syntax-error "cond: no else clause")]
    [(_ (test-expr then-expr then-exprs ...) (else else-expr else-exprs ...))
     (if test-expr
         (do then-expr then-exprs ...)
         (do else-expr else-exprs ...))]
    [(_ (test-expr then-expr ...) exprs ...)
     (if test-expr
         (do then-expr ...)
         (cond exprs ...))]))

; > _syntax_: `(case <expr> <clause ...>)`
; > _clause syntax_: `(<value> <expr> <exprs ...>)`
; > _clause syntax_: `((<value> <values ...>) <expr> <exprs ...>)`
;
;
(define-syntax case
  (syntax-rules (else)
    ((case (key ...)
       clauses ...)
     (let ((atom-key (key ...)))
       (case atom-key clauses ...)))
    ((case key
       (else result1 result2 ...))
     (do result1 result2 ...))
    ((case key
       ((atom atoms ...) result1 result2 ...)
       clause clauses ...)
     (if (> (.indexOf '(atom atoms ...) key) (- 1))
         (do result1 result2 ...)
         (case key clause clauses ...)))
    ((case key
       (atom result1 result2 ...)
       clause clauses ...)
     (if (eq? 'atom key)
         (do result1 result2 ...)
         (case key clause clauses ...)))))

; > _syntax_: `(and <expr1> <expr2> <exprs ...>)`
;
; Expressions `<expr1> <expr2> <exprs ...>` are evaluated left-to-right until
; an expression is found that is equivalent to `#f` or the list is exhausted.
; If any expression is equivalent to `#f` the result is `#f`, otherwise the
; result is `#t`.
(define-syntax and
  (syntax-rules ()
    [(_ expr1 expr2) (&& expr1 expr2)]
    [(_ expr1 exprs ...) (&& expr1 (and exprs ...))]))

; > _syntax_: `(or <expr1> <expr2> <exprs ...>)`
;
; Expressions `<expr1> <expr2> <exprs ...>` are evaluated left-to-right until
; an expression is found that is equivalent to `#t` or the list is exhausted.
; If any expression is equivalent to `#t` the result is `#t`, otherwise the
; result is `#f`.
(define-syntax or
  (syntax-rules ()
    [(_ expr1 expr2) (|| expr1 expr2)]
    [(_ expr1 exprs ...) (|| expr1 (or exprs ...))]))