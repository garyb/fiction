(import "lang")
(import "compiler-macros")

(define '("util") (fn (util)

  (var clone (.clone util))
  (var copyProps (.copyProps util))

  (var show (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [else ((.toString out))])))

  (var expand-error (fn msg
    (fn (state)
      (error (.join (.concat msg `(" (line " ,(.lineNum state) ", char " ,(.charNum state) ")")) "")))))


  ;----------------------------------------------------------------------------
  ; Main
  ;----------------------------------------------------------------------------

  (var get-default-env (fn ()
    (obj))) ; ["import" expand-import])))

  (var expand-main (fn (input env load-import)
    (let* ([env (copyProps env (get-default-env))])
        `(success ,input))))

  ;----------------------------------------------------------------------------
  ; Exports
  ;----------------------------------------------------------------------------

  (obj (expand expand-main))))