(define '("util" "syntax") (fn (util syntax)

  (import "lang")
  (import "prelude")
  (import "compiler-macros")

  (var clone (.clone util))
  (var copyProps (.copyProps util))

  (var show (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [else ((.toString out))])))

  (var expand-error (fn msg
      (error (.join msg ""))))
      
  ;----------------------------------------------------------------------------
  ; Environment
  ;----------------------------------------------------------------------------
  
  (var get-default-env (fn ()
    (obj ["import" expand-import])))
      
  ;----------------------------------------------------------------------------
  ; Expanders
  ;----------------------------------------------------------------------------
  
  (var expand-import (fn (atoms env pos load-import import-chain)
    (.check-import syntax atoms pos)
    (let ([imports (map cadr atoms)]
          [import-chain* (cons (.src-name pos) import-chain)])
      (let loop ([result '()]
                 [env env]
                 [file (car imports)]
                 [rest (cdr imports)])
        (if (memq file import-chain*)
            (expand-error "import: loop found in \"" (.join ((.reverse (cons file import-chain*))) "\" -> \"") "\"")
            (letl ([imported env*] (expand-all (load-import file) env load-import import-chain*))
              (if (eq? (.length rest) 0)
                  `(,(.concat result imported) ,env*)
                  (loop (.concat result imported) env* (car imports) (cdr imports)))))))))
    
  ;----------------------------------------------------------------------------
  ; Helpers
  ;----------------------------------------------------------------------------
  
  (var update-symbol (fn (id env pos form)
    (if (in? env id)
        (let ([new-id (. env id)])
          (if (fn? new-id)
              (expand-error id ": bad syntax")
              `(literal ,new-id ,pos)))
        ; TODO: this should possibly be an error rather than a fallback case
        form)))

  ;----------------------------------------------------------------------------
  ; Main
  ;----------------------------------------------------------------------------
  
  (var expand-list (fn (atoms env pos load-import import-chain)
    (cond
      [(and (eq? (caar atoms) 'symbol)
            (in? env (cadar atoms))
            (fn? (. env (cadar atoms))))
         ((. env (cadar atoms)) (cdr atoms) env pos load-import import-chain)]
      [else (letl ([atoms* env*] (expand-all atoms env load-import import-chain))
              `(((list ,atoms* ,pos)) ,env*))])))
  
  (var expand (fn (form env load-import import-chain)
    (letl ([type value pos] form)
      (case type
        [list (expand-list value env (caddr form) load-import import-chain)]
        [symbol `((,(update-symbol value env (caddr form) form)) ,env)]
        [literal `((,form) ,env)]
        [comment `(() ,env)]
        [else (expand-error "expand: unknown form type " type)]))))
  
  (var expand-all (fn (seq env load-import import-chain)
    `(,(fold-left 
         (fn (result form)
           (letl ([result1 env1] (expand form env load-import import-chain))
             (set! env env1)
             (append result result1)))
         '()
         seq)
      ,env)))

  (var expand-main (fn (input env load-import)
    (let ([env (copyProps env (get-default-env))])
      (try (let ([tmp (expand-all input env load-import '())])
             `(success ,(. tmp 0)))
        (catch e `(failure ,e))))))

  ;----------------------------------------------------------------------------
  ; Exports
  ;----------------------------------------------------------------------------

  (obj (expand expand-main))))