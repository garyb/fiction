(import "lang")
(import "prelude")
(import "compiler-macros")

(define '("util") (fn (util)

  (var clone (.clone util))
  (var copyProps (.copyProps util))

  (var show (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [else ((.toString out))])))

  (var expand-error (fn msg
    (fn (state)
      (error (.join (.concat msg `(" (line " ,(.lineNum state) ", char " ,(.charNum state) ")")) "")))))
      
  ;----------------------------------------------------------------------------
  ; Environment
  ;----------------------------------------------------------------------------
  
  (var get-default-env (fn ()
    (obj))) ; ["import" expand-import])))
      
  ;----------------------------------------------------------------------------
  ; Expanders
  ;----------------------------------------------------------------------------
  
  (var expand-import (fn (form env load-import import-chain)
    `(,`(,form) ,env)))

  ;----------------------------------------------------------------------------
  ; Main
  ;----------------------------------------------------------------------------
  
  (var expand (fn (form env load-import import-chain)
    `(,`(,form) ,env)))
  
  (var expand-all (fn (seq env load-import import-chain)
    (let ([result (fold-left (fn (result form)
                               (let ([tmp (expand form env load-import import-chain)])
                                 (set! env (. tmp 1))
                                 (append result (. tmp 0))))
                             '() seq)])
      `(,result ,env))))

  (var expand-main (fn (input env load-import)
    (let* ([env (copyProps env (get-default-env))]
           [tmp (expand-all input env load-import '())])
        `(success ,(. tmp 0)))))

  ;----------------------------------------------------------------------------
  ; Exports
  ;----------------------------------------------------------------------------

  (obj (expand expand-main))))