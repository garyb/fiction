(import "lang")
(import "prelude")
(import "compiler-macros")

(define '("util") (fn (util)

  (var clone (.clone util))
  (var copyProps (.copyProps util))

  (var show (fn (out)
    (cond [(.isArray Array out) (.join `("(" ,(.join (.map out show) " ") ")") "")]
          [(eq? (typeof out) "string") (+ "\"" (+ out "\""))]
          [else ((.toString out))])))

  (var expand-error (fn msg
      (error msg)))
      
  ;----------------------------------------------------------------------------
  ; Environment
  ;----------------------------------------------------------------------------
  
  (var get-default-env (fn ()
    (obj ["import" expand-import])))
      
  ;----------------------------------------------------------------------------
  ; Expanders
  ;----------------------------------------------------------------------------
  
  (var expand-import (fn (form env load-import import-chain)
    `(,`(,form) ,env)))
    
  ;----------------------------------------------------------------------------
  ; Helpers
  ;----------------------------------------------------------------------------
  
  (var update-symbol (fn (env id form)
    (if (in? env id)
        (let ([new-id (. env id)])
          (if (fn? new-id)
              (expand-error id ": bad syntax")
              `(literal ,new-id ,(. form 2))))
        ; TODO: this should possibly be an error rather than a fallback case
        form)))

  ;----------------------------------------------------------------------------
  ; Main
  ;----------------------------------------------------------------------------
  
  (var expand (fn (form env load-import import-chain)
    (letl ([type value pos] form)
      (case type
        [list `(,`(,form) ,env)]
        [symbol `(,`(,(update-symbol env value form)) ,env)]
        [literal `(,`(,form) ,env)]
        [comment `(() ,env)]
        [else (expand-error "expand: unknown form type " type)]))))
  
  (var expand-all (fn (seq env load-import import-chain)
    `(,(fold-left 
         (fn (result form)
           (letl ([result1 env1] (expand form env load-import import-chain))
             (set! env env1)
             (append result result1)))
         '()
         seq)
      ,env)))

  (var expand-main (fn (input env load-import)
    (let* ([env (copyProps env (get-default-env))]
           [tmp (expand-all input env load-import '())])
        `(success ,(. tmp 0)))))

  ;----------------------------------------------------------------------------
  ; Exports
  ;----------------------------------------------------------------------------

  (obj (expand expand-main))))